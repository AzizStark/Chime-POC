{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["logger","ConsoleLogger","LogLevel","INFO","deviceController","DefaultDeviceController","App","props","getConfigs","a","axios","get","then","res","meetData","JSON","parse","data","body","console","log","setState","meeting","attendee","connectToChimeMeeting","meetingConfig","MeetingSessionConfiguration","state","meetingSession","DefaultMeetingSession","audioVideo","start","session","broadcastVideo","videoStream","startContentShare","displaySharedVideoContent","observer","videoTileDidUpdate","tile","tileId","videoElement","document","getElementById","bindVideoElement","addObserver","trigger","click","openFullscreen","elem","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","getReady","isFullscreen","webcamRef","React","createRef","this","type","onClick","style","backgroundColor","color","value","current","stream","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3986ec1b.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {\n  ConsoleLogger,\n  DefaultDeviceController,\n  DefaultMeetingSession,\n  LogLevel,\n  MeetingSessionConfiguration,\n} from 'amazon-chime-sdk-js';\nimport axios from 'axios';\nimport Webcam from \"react-webcam\";\n\nconst logger = new ConsoleLogger('Chime Logs', LogLevel.INFO)\nconst deviceController = new DefaultDeviceController(logger)\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      meeting: 'None',\n      attendee: 'None',\n      session: '',\n      isFullscreen: 'NO'\n    };\n    this.webcamRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.getReady();\n  }\n\n  getConfigs = async () => {\n    let meetData;\n    await axios.get('http://localhost:4000/').then(res => {\n      meetData = JSON.parse(res.data.body);\n      console.log(meetData)\n      this.setState({\n        meeting: meetData.meeting,\n        attendee: meetData.attendee\n      })\n    });\n  }\n\n  connectToChimeMeeting = async () => {\n    const meetingConfig = new MeetingSessionConfiguration(this.state.meeting, this.state.attendee)\n    const meetingSession = new DefaultMeetingSession(\n      meetingConfig,\n      logger,\n      deviceController\n    )\n\n    // TODO --- configure other stuff for the meeting\n\n    console.log('Starting the Chime meeting!')\n    meetingSession.audioVideo.start()\n\n    await this.setState({\n      session: meetingSession\n    })\n  }\n\n  /**\n   * @param {ChimeMeetingSession} session\n   * @param {MediaStream} videoStream\n   */\n  broadcastVideo = (session, videoStream) => {\n    session.audioVideo.startContentShare(videoStream).then(res => {\n      console.log(res);\n    })\n  }\n\n  displaySharedVideoContent = async (session) => {\n    const observer = {\n      // :: a tile represents a single instance of shared video content\n      videoTileDidUpdate: tile => {\n        console.log('Received content with ID:', tile.tileId)\n\n        // :: TODO: get a video element specifically for this tile\n        const videoElement = document.getElementById('my-video-element')\n        session.audioVideo.bindVideoElement(tile.tileId, videoElement);\n      }\n    }\n    await session.audioVideo.addObserver(observer);\n  }\n\n  trigger = () => {\n    const elem = document.getElementById('buttn');\n    elem.click();\n  }\n\n  openFullscreen = () => {\n    const elem = document.getElementById('my-video-element');\n    if (elem.requestFullscreen) {\n      elem.requestFullscreen();\n    } else if (elem.mozRequestFullScreen) { /* Firefox */\n      elem.mozRequestFullScreen();\n    } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari and Opera */\n      elem.webkitRequestFullscreen();\n    } else if (elem.msRequestFullscreen) { /* IE/Edge */\n      elem.msRequestFullscreen();\n    }\n  }\n\n  getReady = async () => {\n     let a = await this.getConfigs()\n     let b = await this.connectToChimeMeeting()\n     let c = await this.displaySharedVideoContent(this.state.session)\n  }\n\n  render() {\n    const videoConstraints = {\n      width: 1280,\n      height: 720,\n      facingMode: \"user\"\n    };\n\n    return (\n      <div>\n        <h1> CODA CHIME POC </h1>\n        {/* <Webcam ref={this.webcamRef} videoConstraints={videoConstraints} audio=\"true\" /> <br /> */}\n        <input type='button' onClick={() => this.getConfigs()} style={{ backgroundColor: 'chocolate', color: 'white' }} value='Load confs' />\n        <input type='button' onClick={() => this.connectToChimeMeeting()} style={{ backgroundColor: 'chocolate', color: 'white' }} value='Connect chime' />\n        <input type='button' onClick={() => this.displaySharedVideoContent(this.state.session)} style={{ backgroundColor: 'chocolate', color: 'white' }} value='Make streamer ready' />\n        <input type='button' onClick={() => this.broadcastVideo(this.state.session, this.webcamRef.current.stream)} style={{ backgroundColor: 'violet', color: 'white' }} value='Start streaming' />\n        <input type='button' id='buttn' onClick={() => this.openFullscreen()} style={{ backgroundColor: 'violet', color: 'white' }} value='Enter fullscreen' />\n        <video id=\"my-video-element\"></video>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}