{"version":3,"sources":["serviceWorker.js","View.js","Stream.js","index.js"],"names":["Boolean","window","location","hostname","match","logger","ConsoleLogger","LogLevel","INFO","deviceController","DefaultDeviceController","View","props","getConfigs","a","axios","get","then","res","meetData","JSON","parse","data","body","console","log","setState","meeting","attendee","connectToChimeMeeting","meetingConfig","MeetingSessionConfiguration","state","meetingSession","DefaultMeetingSession","audioVideo","start","session","displaySharedVideoContent","observer","videoTileDidUpdate","tile","tileId","videoElement","document","getElementById","bindVideoElement","addObserver","getReady","isFullscreen","this","style","background","display","width","height","id","React","Component","Stream","broadcastVideo","videoStream","startContentShare","webcamRef","createRef","ref","videoConstraints","facingMode","audio","type","onClick","backgroundColor","color","value","current","stream","routing","exact","path","component","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b9e81bf7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nimport {\r\n    ConsoleLogger,\r\n    DefaultDeviceController,\r\n    DefaultMeetingSession,\r\n    LogLevel,\r\n    MeetingSessionConfiguration,\r\n} from 'amazon-chime-sdk-js';\r\nimport axios from 'axios';\r\n\r\nconst logger = new ConsoleLogger('Chime Logs', LogLevel.INFO)\r\nconst deviceController = new DefaultDeviceController(logger)\r\n\r\nexport default class View extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            meeting: 'None',\r\n            attendee: 'None',\r\n            session: '',\r\n            isFullscreen: 'NO'\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getReady();\r\n    }\r\n\r\n    getConfigs = async () => {\r\n        let meetData;\r\n        await axios.get('http://localhost:4000/').then(res => {\r\n            meetData = JSON.parse(res.data.body);\r\n            console.log(meetData)\r\n            this.setState({\r\n                meeting: meetData.meeting,\r\n                attendee: meetData.attendee\r\n            })\r\n        });\r\n    }\r\n\r\n    connectToChimeMeeting = async () => {\r\n        const meetingConfig = new MeetingSessionConfiguration(this.state.meeting, this.state.attendee)\r\n        const meetingSession = new DefaultMeetingSession(\r\n            meetingConfig,\r\n            logger,\r\n            deviceController\r\n        )\r\n\r\n        // TODO --- configure other stuff for the meeting\r\n\r\n        console.log('Starting the Chime meeting!')\r\n        await meetingSession.audioVideo.start()\r\n\r\n        this.setState({\r\n            session: meetingSession\r\n        })\r\n    }\r\n\r\n    displaySharedVideoContent = async (session) => {\r\n        const observer = {\r\n            // :: a tile represents a single instance of shared video content\r\n            videoTileDidUpdate: tile => {\r\n                console.log('Received content with ID:', tile.tileId)\r\n\r\n                // :: TODO: get a video element specifically for this tile\r\n                const videoElement = document.getElementById('my-video-element')\r\n                session.audioVideo.bindVideoElement(tile.tileId, videoElement);\r\n            }\r\n        }\r\n       await session.audioVideo.addObserver(observer);\r\n    }\r\n\r\n    getReady = async () => {\r\n        await this.getConfigs()\r\n        await this.connectToChimeMeeting()\r\n        await this.displaySharedVideoContent(this.state.session)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ background: '#000', display: 'flex', width: '100vw', height: '100vh'}}>\r\n                {/* <h1> CODA CHIME POC </h1>\r\n                <input type='button' onClick={() => this.getConfigs()} style={{ backgroundColor: 'chocolate', color: 'white' }} value='Load confs' />\r\n                <input type='button' onClick={() => this.connectToChimeMeeting()} style={{ backgroundColor: 'chocolate', color: 'white' }} value='Connect chime' />\r\n                <input type='button' onClick={() => this.displaySharedVideoContent(this.state.session)} style={{ backgroundColor: 'chocolate', color: 'white' }} value='Make streamer ready' />  */}\r\n                <video style={{width: '100%', height: '100%'}} id=\"my-video-element\"></video>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {\r\n  ConsoleLogger,\r\n  DefaultDeviceController,\r\n  DefaultMeetingSession,\r\n  LogLevel,\r\n  MeetingSessionConfiguration,\r\n} from 'amazon-chime-sdk-js';\r\nimport axios from 'axios';\r\nimport Webcam from \"react-webcam\";\r\n\r\nconst logger = new ConsoleLogger('Chime Logs', LogLevel.INFO)\r\nconst deviceController = new DefaultDeviceController(logger)\r\n\r\nexport default class Stream extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      meeting: 'None',\r\n      attendee: 'None',\r\n      session: '',\r\n    };\r\n    this.webcamRef = React.createRef();\r\n  }\r\n\r\n  getConfigs = async () => {\r\n    let meetData;\r\n    await axios.get('http://localhost:4000/').then(res => {\r\n      meetData = JSON.parse(res.data.body);\r\n      console.log(meetData)\r\n      this.setState({\r\n        meeting: meetData.meeting,\r\n        attendee: meetData.attendee\r\n      })\r\n    });\r\n  }\r\n\r\n  connectToChimeMeeting = async () => {\r\n    const meetingConfig = new MeetingSessionConfiguration(this.state.meeting, this.state.attendee)\r\n    const meetingSession = new DefaultMeetingSession(\r\n      meetingConfig,\r\n      logger,\r\n      deviceController\r\n    )\r\n\r\n    // TODO --- configure other stuff for the meeting\r\n\r\n    console.log('Starting the Chime meeting!')\r\n    meetingSession.audioVideo.start()\r\n\r\n    await this.setState({\r\n      session: meetingSession\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @param {ChimeMeetingSession} session\r\n   * @param {MediaStream} videoStream\r\n   */\r\n  broadcastVideo = (session, videoStream) => {\r\n    session.audioVideo.startContentShare(videoStream).then(res => {\r\n      console.log(res);\r\n    })\r\n  }\r\n\r\n  displaySharedVideoContent = async (session) => {\r\n    const observer = {\r\n      // :: a tile represents a single instance of shared video content\r\n      videoTileDidUpdate: tile => {\r\n        console.log('Received content with ID:', tile.tileId)\r\n\r\n        // :: TODO: get a video element specifically for this tile\r\n        const videoElement = document.getElementById('my-video-element')\r\n        session.audioVideo.bindVideoElement(tile.tileId, videoElement);\r\n      }\r\n    }\r\n    await session.audioVideo.addObserver(observer);\r\n  }\r\n\r\n\r\n  render() {\r\n    const videoConstraints = {\r\n      width: 1280,\r\n      height: 720,\r\n      facingMode: \"user\"\r\n    };\r\n    const audio = true;\r\n\r\n    return (\r\n      <div>\r\n        <h1> CODA CHIME POC </h1>\r\n        <Webcam ref={this.webcamRef} videoConstraints={videoConstraints} audio={audio} /> <br />\r\n        <input type='button' onClick={() => this.getConfigs()} style={{ backgroundColor: 'chocolate', color: 'white' }} value='Load confs' />\r\n        <input type='button' onClick={() => this.connectToChimeMeeting()} style={{ backgroundColor: 'chocolate', color: 'white' }} value='Connect chime' />\r\n        <input type='button' onClick={() => this.broadcastVideo(this.state.session, this.webcamRef.current.stream)} style={{ backgroundColor: 'violet', color: 'white' }} value='Start streaming' />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\nimport View from './View';\nimport Stream from './Stream';\n\nconst routing = (\n  <Router>\n    <div style={{width: '100%', height: '100%'}}>\n      <Route exact path=\"/\" component={View} />\n      <Route exact path=\"/Stream\" component={Stream} />\n    </div>\n  </Router>\n)\n\nReactDOM.render(routing , document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}